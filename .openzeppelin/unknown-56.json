{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xAEf7A94b0c32509F5c847f50e4Ce829D9452CfD7",
    "txHash": "0xd199390c85a6e7c3c12e05f54db2f8ecda1df705ca6bb5c924d44da4ad483741"
  },
  "proxies": [
    {
      "address": "0x27a339d9B59b21390d7209b78a839868E319301B",
      "txHash": "0xb40fce823a8ab08562705109b08a893378060e6acca0c3c59c5ef5aab078c25e",
      "kind": "transparent"
    },
    {
      "address": "0xbd9a24a97bF3A30E982fF597F28EAA915240e960",
      "txHash": "0x19738cf19c16c24a1eed928293e2edde0e54953adc83fb5466167e71ca77de94",
      "kind": "transparent"
    },
    {
      "address": "0x88a9d39CC8CBa99BAFF507478fe56b4dAEC0901b",
      "txHash": "0xc8816ea3b7af9c4acde17e70e1be4a3f54d2794ca6c36a66ab395669bca4f9b6",
      "kind": "transparent"
    },
    {
      "address": "0x81a527e2f7c681be45cAaDAa8d2B4fB79264526F",
      "txHash": "0x1f189083198f6b1aabcf535ffed2392730bc7d8ca87accb9a029b93afb71977d",
      "kind": "transparent"
    },
    {
      "address": "0xC697601fCE2982fD337e2d00D061A25FEB88601c",
      "txHash": "0x794f97044f3971dbf54222a6cab7223eba0a98068c0750f60b9ff1f861070cf7",
      "kind": "transparent"
    },
    {
      "address": "0xC38470BFE1b08c3baFDaf699eBa2fCA1fd2B040B",
      "txHash": "0x77b3bb11014a4a4e49cd0cda083a13c0fee9e83a91a5dbc55fe4f9482d5b82d2",
      "kind": "transparent"
    },
    {
      "address": "0x52683412f6Ea2B6302ceA8406EfF928510466c2c",
      "txHash": "0xc84058ec3a001675075370324b4037f5f2be4d066ec36cb0ec1d28dcb5855f4a",
      "kind": "transparent"
    },
    {
      "address": "0x455dA436D170e490de887781b906FCf03ddECF02",
      "txHash": "0x5b4d69de353dc46db38112f879d23d1dc28673ea2c41e8ced4c448b8ac7b064d",
      "kind": "transparent"
    },
    {
      "address": "0xB67FbdEFb2c6a051A9dc14362Fee6C5BF5897746",
      "txHash": "0x89b75c953890e6f0e69f64e5dd914ea7179af49a86656550157376ceee4633ae",
      "kind": "transparent"
    },
    {
      "address": "0x8BA9f0841cFA75d7e2c7a316b048b04c98C95cA4",
      "txHash": "0x9562d4033cd5da96f651f6e19eb48aacb877911bd39b09625f0a39c7dc88191c",
      "kind": "transparent"
    },
    {
      "address": "0x0e1D8437c30deF77578EB70ae566AfFE6f082724",
      "txHash": "0x444e7e1e330fa54882c973cb6406c972f5c5f60abdbb579452ad8f994326243c",
      "kind": "transparent"
    },
    {
      "address": "0xFc658Da47B952223Fbf2AB0a00dCc609d07a2E32",
      "txHash": "0x2f05123d8ea319189165dc218adc2b39ab88268044e756fb518c265fd8b8d2fa",
      "kind": "transparent"
    },
    {
      "address": "0x8ff772c006269262b6b38602E2882f7D0C6C3393",
      "txHash": "0xd1ccbb2f00067e9416bafe67bfeb6ac890ec071ee103b99deba33eb818953dc6",
      "kind": "transparent"
    },
    {
      "address": "0x450aF324eC34A0FBE9c6df6a7954786fFEF5fC5c",
      "txHash": "0xc914cb6b6e94a66e451f5fc04633c84f5d767a17b35e91b5147aedbf7f42a996",
      "kind": "transparent"
    },
    {
      "address": "0x9030944F3d6D203c8cC8907Ef192A7d45fA39A99",
      "txHash": "0x88e77f3e78932d62c41965368e952bec1ffa33b767df6fd4d01f61a19bb1b1c4",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c66366ad07278ce329626e197899ba3394427a966ef52023e89eb49a595b3113": {
      "address": "0xd3E87D729878cD466C31cCB917efb971730556F4",
      "txHash": "0x7ab25c18f383fe345cec50d5a2e74b17437b9bffff1748f2535b7e8cc3a55fe3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC20PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "xBlade",
            "label": "tokenBlacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:12"
          },
          {
            "contract": "xBlade",
            "label": "_sellAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:13"
          },
          {
            "contract": "xBlade",
            "label": "_exceptionAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:14"
          },
          {
            "contract": "xBlade",
            "label": "_nextClaimTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/xBlade.sol:15"
          },
          {
            "contract": "xBlade",
            "label": "canClaim",
            "type": "t_bool",
            "src": "../project:/contracts/xBlade.sol:17"
          },
          {
            "contract": "xBlade",
            "label": "sellFeeRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:18"
          },
          {
            "contract": "xBlade",
            "label": "feeAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:19"
          },
          {
            "contract": "xBlade",
            "label": "rewardCycleBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:20"
          },
          {
            "contract": "xBlade",
            "label": "threshHoldTopUpRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:21"
          },
          {
            "contract": "xBlade",
            "label": "stakerAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "d1aeed5a89ff658bb43e38dba7281b1922f7b78de44764fa78dca75886bfdc7d": {
      "address": "0x488c0F82C3c3b8260B4ac21264274780DE033bDD",
      "txHash": "0x5ef44bf5bd46569b830c365ed9b27b924e09b24d02f81321a20a0e7396c23059",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC20PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "xBlade",
            "label": "tokenBlacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:12"
          },
          {
            "contract": "xBlade",
            "label": "_sellAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:13"
          },
          {
            "contract": "xBlade",
            "label": "_exceptionAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:14"
          },
          {
            "contract": "xBlade",
            "label": "_nextClaimTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/xBlade.sol:15"
          },
          {
            "contract": "xBlade",
            "label": "canClaim",
            "type": "t_bool",
            "src": "../project:/contracts/xBlade.sol:17"
          },
          {
            "contract": "xBlade",
            "label": "sellFeeRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:18"
          },
          {
            "contract": "xBlade",
            "label": "feeAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:19"
          },
          {
            "contract": "xBlade",
            "label": "rewardCycleBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:20"
          },
          {
            "contract": "xBlade",
            "label": "threshHoldTopUpRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:21"
          },
          {
            "contract": "xBlade",
            "label": "stakerAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "70b7f75448f84f166800751fa9a7ff0dd08eb010aacc6549e98a75498fb96722": {
      "address": "0xaC5CceF4629bff451867edcD86c31dEE0864A242",
      "txHash": "0x79ef9eb9a7c0cb9686a3dc4d6310f77db3fee834133633ec5ef4067aee3be0cf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)20037_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)20042_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:87"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "../project:/contracts/characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "priceRate",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "availableAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:103"
          }
        ],
        "types": {
          "t_array(t_struct(Character)20037_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)20037_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)20042_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)20042_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3d01146b319e9cd4ff67a8849b2a0fed8d1981aaf5e1d3d1c7291481b9ab57f4": {
      "address": "0x9E6B44e080a67d3309A92D3c80730dE6560dFfe5",
      "txHash": "0xc269dabf77be40862e417429e717e4a238052ab22f66b319a648c295c8120d93",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)27356_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)",
            "src": "../project:/contracts/weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)27356_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)27356_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)27368_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)27363_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "498e2a0b3757e479509d6aec2c2acfebb9b98f681a684fb0bae2c243d547bfca": {
      "address": "0x3289d71Fc107Bb2a686879e35895Bae6634a1DF9",
      "txHash": "0x8f238698be427960b3d2ab39deeabb3e674912f3889148ac5eeceef37ef5b751",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Promos",
            "label": "bits",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/Promos.sol:27"
          },
          {
            "contract": "Promos",
            "label": "firstCharacterPromoInGameOnlyFundsGivenInUsd",
            "type": "t_int128",
            "src": "../project:/contracts/Promos.sol:33"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e57de8cbb88068cec4d549b21bd7b2bf5bdb8b51d5adbaac6bdec7e449da641a": {
      "address": "0xdD3493dEcAC2bD82391fd6fd2f3a6c983372a015",
      "txHash": "0xd19b78c97794fa3f9b8b08a0b0425c3baff263a940e9e07e40acbfdb463dfeb2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Blacksmith",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/Blacksmith.sol:27"
          },
          {
            "contract": "Blacksmith",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/Blacksmith.sol:28"
          },
          {
            "contract": "Blacksmith",
            "label": "tickets",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "../project:/contracts/Blacksmith.sol:30"
          },
          {
            "contract": "Blacksmith",
            "label": "shields",
            "type": "t_contract(Shields)24496",
            "src": "../project:/contracts/Blacksmith.sol:32"
          },
          {
            "contract": "Blacksmith",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/Blacksmith.sol:33"
          },
          {
            "contract": "Blacksmith",
            "label": "itemAddresses",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/Blacksmith.sol:36"
          },
          {
            "contract": "Blacksmith",
            "label": "itemFlatPrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Blacksmith.sol:37"
          }
        ],
        "types": {
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_contract(Shields)24496": {
            "label": "contract Shields"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1325ebd78a13bbb4ed59fbb1ec77e531d6a248c3408428a5d11a885e930db99d": {
      "address": "0xbc215Bca8cD21d811504402BAd9Bd6875A5F57b5",
      "txHash": "0x4c6ad53f22343fd2f42a5603dd5c2a1ac85b65a720f257eb647224cb5bb66b85",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21704",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21750",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21704": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21750": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e3e391409e380a1300a9cd5edea2fe06021747e3c47182e7a84bdc2d92b43007": {
      "address": "0x8087ee61FC0c42d4A39f3ec78Bf69b245A684880",
      "txHash": "0x17d86ec6f6f58925e7e20cf047792f5c533605cb7f7bfff6f89b767923cbc8e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "MultiAccessUpgradeable",
            "label": "access",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/multiAccessUpgradeable.sol:8"
          },
          {
            "contract": "Raid",
            "label": "completed",
            "type": "t_bool",
            "src": "../project:/contracts/raid.sol:15"
          },
          {
            "contract": "Raid",
            "label": "expectedFinishTime",
            "type": "t_uint256",
            "src": "../project:/contracts/raid.sol:16"
          },
          {
            "contract": "Raid",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/raid.sol:18"
          },
          {
            "contract": "Raid",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/raid.sol:19"
          },
          {
            "contract": "Raid",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/raid.sol:20"
          },
          {
            "contract": "Raid",
            "label": "raiders",
            "type": "t_array(t_struct(Raider)22227_storage)dyn_storage",
            "src": "../project:/contracts/raid.sol:28"
          },
          {
            "contract": "Raid",
            "label": "participation",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/raid.sol:29"
          },
          {
            "contract": "RaidBasic",
            "label": "staminaDrain",
            "type": "t_uint64",
            "src": "../project:/contracts/raidBasic.sol:12"
          },
          {
            "contract": "RaidBasic",
            "label": "weaponDrops",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/raidBasic.sol:13"
          },
          {
            "contract": "RaidBasic",
            "label": "bounty",
            "type": "t_uint256",
            "src": "../project:/contracts/raidBasic.sol:14"
          },
          {
            "contract": "RaidBasic",
            "label": "bossTrait",
            "type": "t_uint8",
            "src": "../project:/contracts/raidBasic.sol:15"
          },
          {
            "contract": "RaidBasic",
            "label": "totalPower",
            "type": "t_uint256",
            "src": "../project:/contracts/raidBasic.sol:17"
          }
        ],
        "types": {
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_array(t_struct(Raider)22227_storage)dyn_storage": {
            "label": "struct Raid.Raider[]"
          },
          "t_struct(Raider)22227_storage": {
            "label": "struct Raid.Raider",
            "members": [
              {
                "label": "owner",
                "type": "t_uint256"
              },
              {
                "label": "charID",
                "type": "t_uint256"
              },
              {
                "label": "wepID",
                "type": "t_uint256"
              },
              {
                "label": "power",
                "type": "t_uint24"
              }
            ]
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "ccd3035b53d920c57aaf863d94a79567f506510e61a7943931d33dd7d3b40ab6": {
      "address": "0xe474F205d4FBDd21C0b1E0E709776E46a6722b84",
      "txHash": "0x95697d97cc41f6794cb0f74c76bebd375a6fa58e6f20975a5bc9cdf99d1a6624",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "SecretBox",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/SecretBox.sol:14"
          },
          {
            "contract": "SecretBox",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/SecretBox.sol:16"
          },
          {
            "contract": "SecretBox",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/SecretBox.sol:17"
          },
          {
            "contract": "SecretBox",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/SecretBox.sol:18"
          },
          {
            "contract": "SecretBox",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/SecretBox.sol:20"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxPrice",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:22"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxPrice",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:23"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:24"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d462a73ebd7474c377ab8edca79f006068b483471c885812abd5a0691fac47c4": {
      "address": "0xfe50D30f787BfAD9296332C86F4bf8252c3E2c1a",
      "txHash": "0xb7fc5ec540e9e43f3eade8fbc3f7a3ca3b495c5cb2ec0e78186f77fa391a50b3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "NFTMarket",
            "label": "skillToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/NFTMarket.sol:70"
          },
          {
            "contract": "NFTMarket",
            "label": "taxRecipient",
            "type": "t_address",
            "src": "../project:/contracts/NFTMarket.sol:71"
          },
          {
            "contract": "NFTMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15705_storage))",
            "src": "../project:/contracts/NFTMarket.sol:75"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenIDs",
            "type": "t_mapping(t_address,t_struct(UintSet)7366_storage)",
            "src": "../project:/contracts/NFTMarket.sol:77"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenTypes",
            "type": "t_struct(AddressSet)7245_storage",
            "src": "../project:/contracts/NFTMarket.sol:79"
          },
          {
            "contract": "NFTMarket",
            "label": "isTokenBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:82"
          },
          {
            "contract": "NFTMarket",
            "label": "isUserBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:84"
          },
          {
            "contract": "NFTMarket",
            "label": "tax",
            "type": "t_mapping(t_address,t_int128)",
            "src": "../project:/contracts/NFTMarket.sol:87"
          },
          {
            "contract": "NFTMarket",
            "label": "freeTax",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:89"
          },
          {
            "contract": "NFTMarket",
            "label": "defaultTax",
            "type": "t_int128",
            "src": "../project:/contracts/NFTMarket.sol:90"
          },
          {
            "contract": "NFTMarket",
            "label": "allowedTokenTypes",
            "type": "t_struct(AddressSet)7245_storage",
            "src": "../project:/contracts/NFTMarket.sol:93"
          },
          {
            "contract": "NFTMarket",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/NFTMarket.sol:95"
          },
          {
            "contract": "NFTMarket",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/NFTMarket.sol:96"
          }
        ],
        "types": {
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15705_storage))": {
            "label": "mapping(address => mapping(uint256 => struct NFTMarket.Listing))"
          },
          "t_mapping(t_uint256,t_struct(Listing)15705_storage)": {
            "label": "mapping(uint256 => struct NFTMarket.Listing)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Listing)15705_storage": {
            "label": "struct NFTMarket.Listing",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UintSet)7366_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)7366_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6980_storage"
              }
            ]
          },
          "t_struct(Set)6980_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(AddressSet)7245_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6980_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_int128)": {
            "label": "mapping(address => int128)"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2a551780dde6a79ebc984418859c0f22118f00f3c12fcf92ac60d89b5fd6440": {
      "address": "0x80ceb112dEfDeE0626969c6c71CE9Fd3D1beBBdA",
      "txHash": "0x9423f71938477874cc827497373f75c522762664e4804b42cebd5f2ee9b85111",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "../project:/contracts/staking/RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "../project:/contracts/staking/FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "74d807bf77f29c2ea850d45abf2e54176c870166b50dfdf121a9358e3dc33b3f": {
      "address": "0xBe67D7Dbf14967109dFDB6bFCDE8C57bb76F78BB",
      "txHash": "0x0d98f8c8a6cad28c03cb4ea51bd9c5cd098c9b7533690b7d7eba07405a825345",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Shields",
            "label": "tokens",
            "type": "t_array(t_struct(Shield)22940_storage)dyn_storage",
            "src": "../project:/contracts/shields.sol:59"
          },
          {
            "contract": "Shields",
            "label": "cosmetics",
            "type": "t_array(t_struct(ShieldCosmetics)22945_storage)dyn_storage",
            "src": "../project:/contracts/shields.sol:60"
          },
          {
            "contract": "Shields",
            "label": "shieldBaseMultiplier",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:62"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:63"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointDEF",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:64"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:65"
          },
          {
            "contract": "Shields",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/shields.sol:67"
          },
          {
            "contract": "Shields",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/shields.sol:68"
          },
          {
            "contract": "Shields",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/shields.sol:70"
          },
          {
            "contract": "Shields",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/shields.sol:75"
          }
        ],
        "types": {
          "t_array(t_struct(Shield)22940_storage)dyn_storage": {
            "label": "struct Shields.Shield[]"
          },
          "t_struct(Shield)22940_storage": {
            "label": "struct Shields.Shield",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(ShieldCosmetics)22945_storage)dyn_storage": {
            "label": "struct Shields.ShieldCosmetics[]"
          },
          "t_struct(ShieldCosmetics)22945_storage": {
            "label": "struct Shields.ShieldCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "63055268def2a0b388ac4780bf0fdbacb561894004cf82a62b4d84c24f4b2fd4": {
      "address": "0x99982CAa45F42d6C67f69C71069788300F1e2aFa",
      "txHash": "0xf20669be41eb8fae419621260834d5c628480f8ad61cee4e2cab8f9156f21382",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21704",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21750",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21704": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21750": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "16e4defb8203d3ac96feae04eff3db779e5b7d2e1c5061f11b87980ef8bb3c0c": {
      "address": "0xa7f00d7272Bb1D410cEC203B4b8077D99077b515",
      "txHash": "0xfbe80366bceac025405d5706ff76585a4a9439f594d17866e20de7e53f3cd226",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)27356_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)",
            "src": "../project:/contracts/weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)27356_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)27356_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)27368_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)27363_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee244d16584ffd0e490acf78c2651066eef4a1875d9b8030f85947f33c866c42": {
      "address": "0x95e30bd46B66Ea5C3e6B4D45F727Fd26741dD963",
      "txHash": "0xbadd9feeec365768ef93384ac15498cf9697fdbe0b5a205372bcc945133e8fab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21014",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30163",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21751",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21715",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18052",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21761",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21014": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30163": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21751": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21715": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18052": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21761": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89440df28be55d70cfc5a943089706b121d32c71563e381bfe161539250991ef": {
      "address": "0x49891a35027b7482f3d8c791C0A4ab3FF11d882D",
      "txHash": "0xa3eff98dbe217548c63a153c8e879b731e9a67174159e73f4ab01a4cc93424fe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21053",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30202",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21790",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21754",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18091",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21800",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21053": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30202": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21790": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21754": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18091": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21800": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
