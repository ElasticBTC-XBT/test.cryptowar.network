{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xE545bB0d4b89eD6bbb9A46Df6310448cB08B4333",
    "txHash": "0x53cd4a66e386d266e7db031b86f797f501dfb0e0a83893063bf71b68e9f30f92"
  },
  "proxies": [
    {
      "address": "0x47319d0858a4D97DEb053A67CB04fde458281548",
      "txHash": "0xcff7202119b0c56450099f6f80181f3537de24f6e5289ee4b9045ea83f77b3f8",
      "kind": "transparent"
    },
    {
      "address": "0x0C06e5A4f7149189D0d3F57EBbB7ac0E52D3cbe4",
      "txHash": "0xdcad7eef583d5f11a50f87e4d4eee17e4774dc993877a7942c0a6c3cb70a4373",
      "kind": "transparent"
    },
    {
      "address": "0x113A2e02313Aa7fd4d0461A571CA7Cee1217B6D3",
      "txHash": "0xfdcb1d27ff04917e4220ddcbbf3e2cfa6a08ec193cde4f5ca9c3a001a118eaf8",
      "kind": "transparent"
    },
    {
      "address": "0x047A3131B5Da8414a4e22AF4dE6eac0FCe10D1C1",
      "txHash": "0x995c68644a2f38a5ceadd68b121feab43aa8bea534bc613e23837b6db863dc94",
      "kind": "transparent"
    },
    {
      "address": "0x90e12FddDC8cc15033c48D9e094801D7039b3a02",
      "txHash": "0x15244fed42fa97ce491aed09b5757a82960551470e7aa2d6b3f3ce81712c0ccd",
      "kind": "transparent"
    },
    {
      "address": "0xdC0A2f048f6E5e40653692422Ba876d2fc48E630",
      "txHash": "0xbb6b5688d58c1f1978db397f706ff681e237898246be65b7f58a6903d79681b1",
      "kind": "transparent"
    },
    {
      "address": "0xEf589f1b86F165CD7fb335bac3Baea7afE8bfdB2",
      "txHash": "0x7ef69d4426c09ddcd60717678b1a1b8ee95892e9683e1f4fb6e91c18da0ed0ac",
      "kind": "transparent"
    },
    {
      "address": "0x52d125c988C2Fc23e2Bf919a3bfaEf686136004D",
      "txHash": "0x1ae16a61d410db950b05c2049292bdf62aadb46d53e5dcff37c671fc7538d522",
      "kind": "transparent"
    },
    {
      "address": "0x6e2768b769c84186126D30285ff6Ed5022679342",
      "txHash": "0xc095a8748e75b78bdbbd84f9deea54a77dabb0946040fea3f12f6964f7369e43",
      "kind": "transparent"
    },
    {
      "address": "0xBE7E8c1e7210dFB95C7Cf8a516754a58B14B6352",
      "txHash": "0x925394aaa09507be1a0bd21a7d1e6d0a0eceb3961b08171c1b711ceb8060ae9c",
      "kind": "transparent"
    },
    {
      "address": "0xEAF75b1061F3B8B8154d000a3F3B48afCF0E2303",
      "txHash": "0x1db33a1ab44a1d06e9e96d89d2d32a41032649454ea110b102183a58f4b5137e",
      "kind": "transparent"
    },
    {
      "address": "0x6abb8a1F8918584A514fB2845D5e096a26EF558a",
      "txHash": "0xe42c1d1ceffb0f5775a717b33690c0e209452001a0d882c862df240c1f260771",
      "kind": "transparent"
    },
    {
      "address": "0xF554833a5c1e92f3270df8A2052dCD8fa28eac6F",
      "txHash": "0x38b5f761d2d8d4d7418dc3f98f14b0f26b41cabce33581e3378c38453df37830",
      "kind": "transparent"
    },
    {
      "address": "0x27dBD9a9b55E1Af32C42DC3604347fDb3D5b809C",
      "txHash": "0xe89ad1cc224378a4ac343f7b703a71770dbee03b9fc0a0daaee24fed83a46c30",
      "kind": "transparent"
    },
    {
      "address": "0x4af567056CB167647b78c5C98D881DD0f2eb84Cb",
      "txHash": "0x886546adcea983e17295f067c25e8260ffbba50c12d103bad8b0023f67df036e",
      "kind": "transparent"
    },
    {
      "address": "0xD1c7891aEf1B0e6E82502D72A3a612386ce2D8f6",
      "txHash": "0xf213868133f9a8ed45eeb5ce89bebac63996c97daafaf3cf30c3293a4fb366c6",
      "kind": "transparent"
    },
    {
      "address": "0x40084E36c833d1FFe3c74594156035464C011aC7",
      "txHash": "0x2adbfcf768b74d7cc5b9d3c4ffd7d42d23f3cc076d1edf1725a9fccecd07d685",
      "kind": "transparent"
    },
    {
      "address": "0xb376621eF88D2b9Af608F5ab052a0Fb28A83BC59",
      "txHash": "0xec0b58b10b45e23c322c8f28500602e281f5f933892a5f93036e46eb4b9cb309",
      "kind": "transparent"
    },
    {
      "address": "0xB37d963eE5AD1Be6A0d54bF12D052e822dc272df",
      "txHash": "0x79be54ca818f05dd546c0bf7561fc0dd3c5151e206e165e42357b4f85ab61a50",
      "kind": "transparent"
    },
    {
      "address": "0xD975765Edc14607e9306A01d00005d648FAFF5CA",
      "txHash": "0xb0271386fef469f96f19673044cb4d4204881d3618a9ee43c257c8432037c4cc",
      "kind": "transparent"
    },
    {
      "address": "0x26602a8d0fE45208330Ae5E62CFcbb50d24Bc907",
      "txHash": "0xada2dd5dc115680c6b3c5074f8689f28681e2e4e412178521c4d32657e5ec6e2",
      "kind": "transparent"
    },
    {
      "address": "0x3Cf7FA78a9BB71E74190D526E6882dA736793F60",
      "txHash": "0x8ce9633888ee165d441d6e93419f71e89319560ccbd38d960af5de2b9ca9a5f3",
      "kind": "transparent"
    },
    {
      "address": "0x0b31B02e5b6996DB8e36aa61014053C0849EC12A",
      "txHash": "0x37a0bb3f4230ccb85d746f5fccb38d9b263299aaef29e2f99b1329e0acf2705e",
      "kind": "transparent"
    },
    {
      "address": "0x369A578911A1176D0Ded890a7e22ED35A3BE2872",
      "txHash": "0x1d20e3fe3105a5a348ef82a9383196405820de4f31e6125b77398f5b912cfe6b",
      "kind": "transparent"
    },
    {
      "address": "0x829FDCfB0d73d35b5aa33A6096a0D237971a7338",
      "txHash": "0xbb01901b54358dceb8f2777c2fd7900e3ccfc31a291613b8d8320288af0c7b0e",
      "kind": "transparent"
    },
    {
      "address": "0x85Acf82E5AA77a9c1939F6a06472737E33d38485",
      "txHash": "0xbb58d486b6974162501f3392cb95f1895e0e7ada90bbd092c7e9c2bdad169c0d",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d2a551780dde6a79ebc984418859c0f22118f00f3c12fcf92ac60d89b5fd6440": {
      "address": "0xf678B22a6DC79a0D2d89fB7EB33181436D2763eA",
      "txHash": "0x29739bc5c0b4872aa61fe3b6354806729c39c33f33006dd94c2d0053fb2ceef7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "staking/RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "staking/FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)27037",
            "src": "staking/StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)27037",
            "src": "staking/StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoWars)5034",
            "src": "staking/StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoWars)5034": {
            "label": "contract CryptoWars"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0842f41fc611438e255ffe9df1d3a884f233aae6000c8e12236e0458c7efda06": {
      "address": "0xc76E602aCb230c108DAd42aFfF434bb2F4812a3d",
      "txHash": "0x1e65a930fc048e36f75575c5bb3165493f28a00cb99925b9e8295d3baf62227f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "staking/RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "staking/FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)27037",
            "src": "staking/StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)27037",
            "src": "staking/StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "staking/StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoWars)5034",
            "src": "staking/StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "staking/StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoWars)5034": {
            "label": "contract CryptoWars"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a2467eebf50c707b85c2fac1fe619a01861be2264211e957a78b2d86a3501038": {
      "address": "0x5c342c67cd46f1a41634DeF0db8B1136c9FE5A3E",
      "txHash": "0x29c8aade2a3678dd29029443a2aeac02c6eff6bc72ac146d3eb388d03a54dcad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)25152_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)24529_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)9789_storage)dyn_storage",
            "src": "characters.sol:85"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)9794_storage)dyn_storage",
            "src": "characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "characters.sol:91"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "characters.sol:93"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "characters.sol:95"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "characters.sol:97"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "characters.sol:100"
          }
        ],
        "types": {
          "t_array(t_struct(Character)9789_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)9789_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)9794_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)9794_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)25152_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)25152_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)24529_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)24211_storage"
              }
            ]
          },
          "t_struct(Map)24211_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)24203_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)24203_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)24203_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fd0e2b02c94e2c921d5c45f92687fe56040276d99b42cdb31e4de607ff1668d9": {
      "address": "0x2c70875F5478f13d057baA9378346dA58536Efcf",
      "txHash": "0xa9dd04c377ca21e0b8b69d6cde9ffbffe4845ddcb08b7ba9c27feb32feb05520",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)25152_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)24529_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)17001_storage)dyn_storage",
            "src": "weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)17013_storage)dyn_storage",
            "src": "weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)17008_storage)",
            "src": "weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)17001_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)17001_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)17013_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)17013_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)17008_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)17008_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)25152_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)25152_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)24529_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)24211_storage"
              }
            ]
          },
          "t_struct(Map)24211_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)24203_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)24203_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)24203_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "498e2a0b3757e479509d6aec2c2acfebb9b98f681a684fb0bae2c243d547bfca": {
      "address": "0xef7331cDbdDa8c6aeC8F61E467356eCa8355f971",
      "txHash": "0x9fbfa65b962bf0da0b48bcdbf0cec40945ce378d46ef27eb830aee2c338c3e1a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Promos",
            "label": "bits",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "Promos.sol:27"
          },
          {
            "contract": "Promos",
            "label": "firstCharacterPromoInGameOnlyFundsGivenInUsd",
            "type": "t_int128",
            "src": "Promos.sol:33"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e57de8cbb88068cec4d549b21bd7b2bf5bdb8b51d5adbaac6bdec7e449da641a": {
      "address": "0xe044EFb8fD99a008BCc9B5a287A71908be5BaA0A",
      "txHash": "0xb9b26c0badf593ef6b2a8fc9bf1719e4a5c3ea8043326af688746a3ebeac7660",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Blacksmith",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "Blacksmith.sol:27"
          },
          {
            "contract": "Blacksmith",
            "label": "randoms",
            "type": "t_contract(IRandoms)11420",
            "src": "Blacksmith.sol:28"
          },
          {
            "contract": "Blacksmith",
            "label": "tickets",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "Blacksmith.sol:30"
          },
          {
            "contract": "Blacksmith",
            "label": "shields",
            "type": "t_contract(Shields)14141",
            "src": "Blacksmith.sol:32"
          },
          {
            "contract": "Blacksmith",
            "label": "game",
            "type": "t_contract(CryptoWars)5034",
            "src": "Blacksmith.sol:33"
          },
          {
            "contract": "Blacksmith",
            "label": "itemAddresses",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "Blacksmith.sol:36"
          },
          {
            "contract": "Blacksmith",
            "label": "itemFlatPrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "Blacksmith.sol:37"
          }
        ],
        "types": {
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_contract(IRandoms)11420": {
            "label": "contract IRandoms"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_contract(Shields)14141": {
            "label": "contract Shields"
          },
          "t_contract(CryptoWars)5034": {
            "label": "contract CryptoWars"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1e309aa48a186e3755a023c2a1d7038e04534b9b163477e034c86f2b1b1d4e86": {
      "address": "0xbd81c9E2dd1d613F88581083488B70c6539be99A",
      "txHash": "0x81b98ab8d4ab5f2b15b20d3a31e8fd09e2f245d608a5580deb0c33fc4ea4ed1d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)10683",
            "src": "CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)27037",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)11420",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)11384",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:113"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:119"
          },
          {
            "contract": "CryptoWars",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)11430",
            "src": "CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)853",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)10683": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)11420": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)11384": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)11430": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)853": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e3e391409e380a1300a9cd5edea2fe06021747e3c47182e7a84bdc2d92b43007": {
      "address": "0xc5dE00bc0Fe724FDCc702F367f7Aae0849457A0c",
      "txHash": "0x878995b4f5bebcffaefbe2b1c5c74e9834bf3c622ac19fa9f55604b952404a03",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "MultiAccessUpgradeable",
            "label": "access",
            "type": "t_mapping(t_address,t_bool)",
            "src": "multiAccessUpgradeable.sol:8"
          },
          {
            "contract": "Raid",
            "label": "completed",
            "type": "t_bool",
            "src": "raid.sol:15"
          },
          {
            "contract": "Raid",
            "label": "expectedFinishTime",
            "type": "t_uint256",
            "src": "raid.sol:16"
          },
          {
            "contract": "Raid",
            "label": "game",
            "type": "t_contract(CryptoWars)5034",
            "src": "raid.sol:18"
          },
          {
            "contract": "Raid",
            "label": "characters",
            "type": "t_contract(Characters)10683",
            "src": "raid.sol:19"
          },
          {
            "contract": "Raid",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "raid.sol:20"
          },
          {
            "contract": "Raid",
            "label": "raiders",
            "type": "t_array(t_struct(Raider)11872_storage)dyn_storage",
            "src": "raid.sol:28"
          },
          {
            "contract": "Raid",
            "label": "participation",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "raid.sol:29"
          },
          {
            "contract": "RaidBasic",
            "label": "staminaDrain",
            "type": "t_uint64",
            "src": "raidBasic.sol:12"
          },
          {
            "contract": "RaidBasic",
            "label": "weaponDrops",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "raidBasic.sol:13"
          },
          {
            "contract": "RaidBasic",
            "label": "bounty",
            "type": "t_uint256",
            "src": "raidBasic.sol:14"
          },
          {
            "contract": "RaidBasic",
            "label": "bossTrait",
            "type": "t_uint8",
            "src": "raidBasic.sol:15"
          },
          {
            "contract": "RaidBasic",
            "label": "totalPower",
            "type": "t_uint256",
            "src": "raidBasic.sol:17"
          }
        ],
        "types": {
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(CryptoWars)5034": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)10683": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_array(t_struct(Raider)11872_storage)dyn_storage": {
            "label": "struct Raid.Raider[]"
          },
          "t_struct(Raider)11872_storage": {
            "label": "struct Raid.Raider",
            "members": [
              {
                "label": "owner",
                "type": "t_uint256"
              },
              {
                "label": "charID",
                "type": "t_uint256"
              },
              {
                "label": "wepID",
                "type": "t_uint256"
              },
              {
                "label": "power",
                "type": "t_uint24"
              }
            ]
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "85205ba17024dc762ddc8e1ee97cbf3f98b3bf9f500745f5494b5e21f11e4514": {
      "address": "0xe89946cD97d0Be3c46b2b7f1912C1aDE5d0C4e93",
      "txHash": "0x8cfe285e2683fa5904754fe4f1f6ddc5d7dbb9196afb831e0ce3e55199992c01",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "SecretBox",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "SecretBox.sol:14"
          },
          {
            "contract": "SecretBox",
            "label": "game",
            "type": "t_contract(CryptoWars)5034",
            "src": "SecretBox.sol:16"
          },
          {
            "contract": "SecretBox",
            "label": "characters",
            "type": "t_contract(Characters)10683",
            "src": "SecretBox.sol:17"
          },
          {
            "contract": "SecretBox",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "SecretBox.sol:18"
          },
          {
            "contract": "SecretBox",
            "label": "xBlade",
            "type": "t_contract(IERC20)27037",
            "src": "SecretBox.sol:20"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxPrice",
            "type": "t_uint256",
            "src": "SecretBox.sol:22"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxPrice",
            "type": "t_uint256",
            "src": "SecretBox.sol:23"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxAmount",
            "type": "t_uint256",
            "src": "SecretBox.sol:24"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxAmount",
            "type": "t_uint256",
            "src": "SecretBox.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CryptoWars)5034": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)10683": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d462a73ebd7474c377ab8edca79f006068b483471c885812abd5a0691fac47c4": {
      "address": "0x99b1B93bC6E6A5d7B8040250a22fC5062B6a622B",
      "txHash": "0xaf39004c088d20384359401c8bd9713f424bc8cb498dbb1c9ee68a351392eaf6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "NFTMarket",
            "label": "skillToken",
            "type": "t_contract(IERC20)27037",
            "src": "NFTMarket.sol:70"
          },
          {
            "contract": "NFTMarket",
            "label": "taxRecipient",
            "type": "t_address",
            "src": "NFTMarket.sol:71"
          },
          {
            "contract": "NFTMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)5461_storage))",
            "src": "NFTMarket.sol:75"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenIDs",
            "type": "t_mapping(t_address,t_struct(UintSet)28082_storage)",
            "src": "NFTMarket.sol:77"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenTypes",
            "type": "t_struct(AddressSet)27961_storage",
            "src": "NFTMarket.sol:79"
          },
          {
            "contract": "NFTMarket",
            "label": "isTokenBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "NFTMarket.sol:82"
          },
          {
            "contract": "NFTMarket",
            "label": "isUserBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "NFTMarket.sol:84"
          },
          {
            "contract": "NFTMarket",
            "label": "tax",
            "type": "t_mapping(t_address,t_int128)",
            "src": "NFTMarket.sol:87"
          },
          {
            "contract": "NFTMarket",
            "label": "freeTax",
            "type": "t_mapping(t_address,t_bool)",
            "src": "NFTMarket.sol:89"
          },
          {
            "contract": "NFTMarket",
            "label": "defaultTax",
            "type": "t_int128",
            "src": "NFTMarket.sol:90"
          },
          {
            "contract": "NFTMarket",
            "label": "allowedTokenTypes",
            "type": "t_struct(AddressSet)27961_storage",
            "src": "NFTMarket.sol:93"
          },
          {
            "contract": "NFTMarket",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "NFTMarket.sol:95"
          },
          {
            "contract": "NFTMarket",
            "label": "characters",
            "type": "t_contract(Characters)10683",
            "src": "NFTMarket.sol:96"
          }
        ],
        "types": {
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)5461_storage))": {
            "label": "mapping(address => mapping(uint256 => struct NFTMarket.Listing))"
          },
          "t_mapping(t_uint256,t_struct(Listing)5461_storage)": {
            "label": "mapping(uint256 => struct NFTMarket.Listing)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Listing)5461_storage": {
            "label": "struct NFTMarket.Listing",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UintSet)28082_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)28082_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)27696_storage"
              }
            ]
          },
          "t_struct(Set)27696_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(AddressSet)27961_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)27696_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_int128)": {
            "label": "mapping(address => int128)"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_contract(Characters)10683": {
            "label": "contract Characters"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "74d807bf77f29c2ea850d45abf2e54176c870166b50dfdf121a9358e3dc33b3f": {
      "address": "0x96B002A34320451228cF901E2b8701C02FC936b8",
      "txHash": "0xd226bd0a9451a370245a67db9dd95687809b30573a3e2b3805a99d17206537e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)25152_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)24529_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Shields",
            "label": "tokens",
            "type": "t_array(t_struct(Shield)12585_storage)dyn_storage",
            "src": "shields.sol:59"
          },
          {
            "contract": "Shields",
            "label": "cosmetics",
            "type": "t_array(t_struct(ShieldCosmetics)12590_storage)dyn_storage",
            "src": "shields.sol:60"
          },
          {
            "contract": "Shields",
            "label": "shieldBaseMultiplier",
            "type": "t_int128",
            "src": "shields.sol:62"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointBasic",
            "type": "t_int128",
            "src": "shields.sol:63"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointDEF",
            "type": "t_int128",
            "src": "shields.sol:64"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointMatching",
            "type": "t_int128",
            "src": "shields.sol:65"
          },
          {
            "contract": "Shields",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "shields.sol:67"
          },
          {
            "contract": "Shields",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "shields.sol:68"
          },
          {
            "contract": "Shields",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "shields.sol:70"
          },
          {
            "contract": "Shields",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "shields.sol:75"
          }
        ],
        "types": {
          "t_array(t_struct(Shield)12585_storage)dyn_storage": {
            "label": "struct Shields.Shield[]"
          },
          "t_struct(Shield)12585_storage": {
            "label": "struct Shields.Shield",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(ShieldCosmetics)12590_storage)dyn_storage": {
            "label": "struct Shields.ShieldCosmetics[]"
          },
          "t_struct(ShieldCosmetics)12590_storage": {
            "label": "struct Shields.ShieldCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)25152_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)25152_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)24529_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)24211_storage"
              }
            ]
          },
          "t_struct(Map)24211_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)24203_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)24203_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)24203_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3d01146b319e9cd4ff67a8849b2a0fed8d1981aaf5e1d3d1c7291481b9ab57f4": {
      "address": "0x787e2a5e3EEdA115Ec48167a906e4B05a9Fa90f1",
      "txHash": "0xbd4373e4425a6530f85a9fa85ae006d1cbe354561f719de17b6e95b6cdac1c83",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)25152_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)24529_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)17001_storage)dyn_storage",
            "src": "weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)17013_storage)dyn_storage",
            "src": "weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)17008_storage)",
            "src": "weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)17001_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)17001_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)17013_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)17013_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)17008_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)17008_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)25152_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)25152_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)24529_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)24211_storage"
              }
            ]
          },
          "t_struct(Map)24211_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)24203_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)24203_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)24203_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8f957e18a0205eb0565352eb17a474bf3c57ce85093c9aaaf4d5a718ff52d86f": {
      "address": "0x0ff0445965893F0D7657D9F374Bc18F7540C121e",
      "txHash": "0x2f0865554d1a8a19b9880236f7bb2f061cb6da0f5cbeed4f5a6f7a1c2e0089f1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)10683",
            "src": "CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)19797",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)27037",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)11420",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)11384",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:113"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:119"
          },
          {
            "contract": "CryptoWars",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)7797",
            "src": "CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)11430",
            "src": "CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)853",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)10683": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19797": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27037": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)11420": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)11384": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7797": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)11430": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)853": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21163_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21163_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25031_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25031_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24766_storage"
              }
            ]
          },
          "t_struct(Set)24766_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3e3d7f801d1ad21092b009c516e5bd668e230552d224ea38a16436addc50e1c7": {
      "address": "0xD4bac88Cc7111328c508F6762432fFf9130467A4",
      "txHash": "0x17c1676881dca25c24496318a4a1eb9eea540fa6c43b4ad21ce6d0a356c096c7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)10682",
            "src": "CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)19796",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)27036",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)11419",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)11383",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:113"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:119"
          },
          {
            "contract": "CryptoWars",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)7796",
            "src": "CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)11429",
            "src": "CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)853",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)10682": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19796": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27036": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)11419": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)11383": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7796": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)11429": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)853": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21162_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25030_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25030_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24765_storage"
              }
            ]
          },
          "t_struct(Set)24765_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "64ea0ee26d5967db381fdc3a3e3c42054aa235b771b2ac5c28d4d6b659f3a0ec": {
      "address": "0xA8C28A2BB2266F8bf9C525c8107f26019014abF1",
      "txHash": "0x902284f561d2470dc734e20a03f0788bca0f7327d1018b8d5681daaf0cedb80d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)10682",
            "src": "CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)19796",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)27036",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)11419",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)11383",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:113"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:119"
          },
          {
            "contract": "CryptoWars",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)7796",
            "src": "CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)11429",
            "src": "CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)853",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)10682": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19796": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27036": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)11419": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)11383": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7796": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)11429": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)853": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21162_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25030_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25030_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24765_storage"
              }
            ]
          },
          "t_struct(Set)24765_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cbdbf0564aa24d371f36daed43e9da5bc28028645f1419d2283cc99dfa6af9fe": {
      "address": "0xCd21d0cB9B898767E9a115B4a25CA38571F76873",
      "txHash": "0x1f4faa637697d14b68c0ea044babea6d097ed94679cb30896bdbf6095383116b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)10682",
            "src": "CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)19796",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)27036",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)11419",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)11383",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:113"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:119"
          },
          {
            "contract": "CryptoWars",
            "label": "mintWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)7796",
            "src": "CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)11429",
            "src": "CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)853",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)10682": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)19796": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)27036": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)11419": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)11383": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)7796": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)11429": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)853": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)21162_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)21162_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)25030_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)25030_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)24765_storage"
              }
            ]
          },
          "t_struct(Set)24765_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
